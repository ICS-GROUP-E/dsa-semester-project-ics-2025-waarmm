Index: src/ui/priorityQueueUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox, scrolledtext, filedialog\r\nimport datetime\r\nimport csv\r\n\r\nfrom ..ds.priorityQueue import PriorityQueue\r\nfrom ..database.priorityQueue_dao import add_patient_to_db, get_all_patients\r\n\r\n\r\nclass MainWindow:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"Hospital Priority Queue System\")\r\n        self.root.geometry(\"700x500\")\r\n        self.queue = PriorityQueue()\r\n\r\n        # UI Frames\r\n        top_frame = tk.Frame(root, padx=20, pady=10)\r\n        top_frame.pack(fill=\"x\")\r\n\r\n        mid_frame = tk.Frame(root, padx=20, pady=10)\r\n        mid_frame.pack(fill=\"x\")\r\n\r\n        list_frame = tk.Frame(root, padx=20, pady=10)\r\n        list_frame.pack(fill=\"both\", expand=True)\r\n\r\n        log_frame = tk.Frame(root, padx=20, pady=10)\r\n        log_frame.pack(fill=\"both\", expand=True)\r\n\r\n        # --- Top Input Form ---\r\n        tk.Label(top_frame, text=\"Patient Name:\").grid(row=0, column=0, sticky=\"e\")\r\n        self.name_entry = tk.Entry(top_frame)\r\n        self.name_entry.grid(row=0, column=1, padx=10)\r\n\r\n        tk.Label(top_frame, text=\"Priority (1-5):\").grid(row=0, column=2, sticky=\"e\")\r\n        self.priority_entry = tk.Entry(top_frame)\r\n        self.priority_entry.grid(row=0, column=3, padx=10)\r\n\r\n        tk.Button(top_frame, text=\"Add Patient\", bg=\"#27ae60\", fg=\"white\", command=self.add_patient).grid(row=0, column=4, padx=10)\r\n        tk.Button(top_frame, text=\"Serve Next\", bg=\"#e67e22\", fg=\"white\", command=self.serve_patient).grid(row=0, column=5, padx=10)\r\n\r\n        # --- Mid Buttons ---\r\n        tk.Button(mid_frame, text=\"Show Arrival Order\", bg=\"#2980b9\", fg=\"white\", command=self.show_arrival_order).grid(row=0, column=0, padx=5)\r\n        tk.Button(mid_frame, text=\"Show Priority Order\", bg=\"#8e44ad\", fg=\"white\", command=self.show_priority_order).grid(row=0, column=1, padx=5)\r\n        tk.Button(mid_frame, text=\"Clear Console\", bg=\"#95a5a6\", command=self.clear_console).grid(row=0, column=2, padx=5)\r\n        tk.Button(mid_frame, text=\"Export to CSV\", bg=\"#34495e\", fg=\"white\", command=self.export_to_csv).grid(row=0, column=3, padx=5)\r\n\r\n        # --- Patient List Display ---\r\n        tk.Label(list_frame, text=\"Patient Queue:\").pack(anchor=\"w\")\r\n        self.patient_list = tk.Listbox(list_frame, height=8, font=('Courier', 10))\r\n        self.patient_list.pack(fill=\"both\", expand=True, pady=(0, 10))\r\n\r\n        # --- Console Output ---\r\n        tk.Label(log_frame, text=\"Console Log:\").pack(anchor=\"w\")\r\n        self.log_box = scrolledtext.ScrolledText(log_frame, height=10, bg=\"#2c3e50\", fg=\"#ecf0f1\")\r\n        self.log_box.pack(fill=\"both\", expand=True)\r\n\r\n        self.arrival_order = []  # [(name, priority, timestamp)]\r\n        self.update_display()\r\n\r\n    def log(self, message):\r\n        \"\"\" Append messages to console log box \"\"\"\r\n        self.log_box.insert(tk.END, message + \"\\n\")\r\n        self.log_box.see(tk.END)\r\n\r\n    def add_patient(self):\r\n        \"\"\" Handle patient input, validate and insert into queue \"\"\"\r\n        name = self.name_entry.get().strip()\r\n        try:\r\n            priority = int(self.priority_entry.get())\r\n            if not name or not (1 <= priority <= 5):\r\n                raise ValueError\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Input\", \"Enter a name and a priority (1-5).\")\r\n            return\r\n\r\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n        self.queue.insert(name, priority)\r\n        self.arrival_order.append((name, priority, timestamp))  # now includes timestamp\r\n        add_patient_to_db(name, priority)\r\n\r\n        self.name_entry.delete(0, tk.END)\r\n        self.priority_entry.delete(0, tk.END)\r\n        self.log(f\"✅ Added: {name} (Priority {priority}) at {timestamp}\")\r\n        self.show_arrival_order()\r\n\r\n    def serve_patient(self):\r\n        \"\"\" Remove highest priority patient from queue \"\"\"\r\n        patient = self.queue.remove_highest_priority()\r\n        if patient:\r\n            self.log(f\"\uD83D\uDE91 Serving {patient.name} (Priority {patient.priority})\")\r\n            self.arrival_order = [p for p in self.arrival_order if p[0] != patient.name]\r\n            self.show_arrival_order()\r\n        else:\r\n            messagebox.showinfo(\"Queue Empty\", \"No patients in the queue.\")\r\n\r\n    def show_arrival_order(self):\r\n        \"\"\" Display patients in order they were added \"\"\"\r\n        self.patient_list.delete(0, tk.END)\r\n        self.log(\"\uD83D\uDC65 Showing in Arrival Order\")\r\n        for i, (name, priority, timestamp) in enumerate(self.arrival_order, 1):\r\n            entry = f\"{i:>2}. {name:<15} Priority: {priority}  Time: {timestamp}\"\r\n            self.patient_list.insert(tk.END, entry)\r\n\r\n    def show_priority_order(self):\r\n        \"\"\" Display patients sorted by priority \"\"\"\r\n        self.patient_list.delete(0, tk.END)\r\n        self.log(\"\uD83D\uDD22 Showing in Priority Order\")\r\n        sorted_patients = sorted(self.arrival_order, key=lambda x: x[1])  # sort by priority\r\n        for i, (name, priority, timestamp) in enumerate(sorted_patients, 1):\r\n            entry = f\"{i:>2}. {name:<15} Priority: {priority}  Time: {timestamp}\"\r\n            self.patient_list.insert(tk.END, entry)\r\n\r\n    def export_to_csv(self):\r\n        \"\"\" Export the patient arrival list to a CSV file \"\"\"\r\n        if not self.arrival_order:\r\n            messagebox.showinfo(\"No Data\", \"No patient records to export.\")\r\n            return\r\n\r\n        file_path = filedialog.asksaveasfilename(defaultextension=\".csv\",\r\n                                                 filetypes=[(\"CSV Files\", \"*.csv\")],\r\n                                                 title=\"Save Report As\")\r\n        if not file_path:\r\n            return  # User cancelled\r\n\r\n        try:\r\n            with open(file_path, mode='w', newline='', encoding='utf-8') as file:\r\n                writer = csv.writer(file)\r\n                writer.writerow([\"Name\", \"Priority\", \"Timestamp\"])\r\n                for name, priority, timestamp in self.arrival_order:\r\n                    writer.writerow([name, priority, timestamp])\r\n            self.log(f\"\uD83D\uDCC4 Report saved to {file_path}\")\r\n            messagebox.showinfo(\"Export Successful\", f\"Report saved to:\\n{file_path}\")\r\n        except Exception as e:\r\n            self.log(f\"❌ Error exporting report: {str(e)}\")\r\n            messagebox.showerror(\"Export Failed\", f\"An error occurred:\\n{str(e)}\")\r\n\r\n    def clear_console(self):\r\n        self.log_box.delete(\"1.0\", tk.END)\r\n        self.log(\"\uD83E\uDDF9 Console cleared\")\r\n\r\n    def update_display(self):\r\n        self.show_arrival_order()\r\n\r\n\r\n# Run the app if this file is executed directly\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    app = MainWindow(root)\r\n    root.mainloop()\r\n
===================================================================
diff --git a/src/ui/priorityQueueUI.py b/src/ui/priorityQueueUI.py
--- a/src/ui/priorityQueueUI.py	(revision 0e174426fcdda8cf9e03b80a4136f41548d322dd)
+++ b/src/ui/priorityQueueUI.py	(date 1752565088175)
@@ -3,8 +3,8 @@
 import datetime
 import csv
 
-from ..ds.priorityQueue import PriorityQueue
-from ..database.priorityQueue_dao import add_patient_to_db, get_all_patients
+from ds.priorityQueue import PriorityQueue
+from database.priorityQueue_dao import add_patient_to_db, get_all_patients
 
 
 class MainWindow:
Index: src/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import Tk\r\nfrom src.ui.priorityQueueUI import MainWindow\r\nfrom src.database.priorityQueue_db_config import initialize_db\r\n\r\ndef main():\r\n    initialize_db()\r\n    root = Tk()\r\n    app = MainWindow(root)\r\n    root.mainloop()\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
===================================================================
diff --git a/src/main.py b/src/main.py
--- a/src/main.py	(revision 0e174426fcdda8cf9e03b80a4136f41548d322dd)
+++ b/src/main.py	(date 1752565066180)
@@ -1,6 +1,6 @@
 from tkinter import Tk
-from src.ui.priorityQueueUI import MainWindow
-from src.database.priorityQueue_db_config import initialize_db
+from UI.priorityQueueUI import MainWindow
+from database.priorityQueue_db_config import initialize_db
 
 def main():
     initialize_db()
@@ -9,4 +9,4 @@
     root.mainloop()
 
 if __name__ == "__main__":
-    main()
+    main()
\ No newline at end of file
Index: src/tests/test_hashtable.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nimport os\r\nimport pytest\r\n\r\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'ds')))\r\n\r\nfrom ..ds.hashtable_patients import HashTable, Patient\r\n\r\n@pytest.fixture\r\ndef hashtable():\r\n    ht = HashTable()\r\n    return ht\r\n\r\ndef test_add_patient_success(hashtable):\r\n    patient = Patient(\"1\", \"Alice\", 30, \"Flu\")\r\n    is_added = hashtable.addPatient(patient)\r\n    assert is_added == True\r\n    assert hashtable.getPatient(\"1\") == patient\r\n\r\n\r\ndef test_add_duplicate_patient(hashtable):\r\n    patient = Patient(\"2\", \"Bob\", 25, \"Diabetes\")\r\n    hashtable.addPatient(patient)\r\n    duplicate = Patient(\"2\", \"Bobby\", 30, \"Cold\")\r\n    is_added = hashtable.addPatient(duplicate)\r\n    assert is_added is False\r\n    assert hashtable.getPatient(\"2\").name == \"Bob\"\r\n\r\n\r\ndef test_get_patient_not_found(hashtable):\r\n    patient = hashtable.getPatient(\"999\")\r\n    assert patient is None\r\n\r\n\r\ndef test_remove_patient_success(hashtable):\r\n    patient = Patient(\"3\", \"Charlie\", 35, \"Hypertension\")\r\n    hashtable.addPatient(patient)\r\n    is_removed = hashtable.removePatient(\"3\")\r\n    assert is_removed is True\r\n    assert hashtable.getPatient(\"3\") is None\r\n\r\n\r\ndef test_remove_patient_not_found(hashtable):\r\n    is_removed = hashtable.removePatient(\"999\")\r\n    assert is_removed is False\r\n\r\n\r\ndef test_get_all_patients(hashtable):\r\n    patient1 = Patient(\"4\", \"David\", 40, \"Asthma\")\r\n    patient2 = Patient(\"5\", \"Eve\", 45, \"Cancer\")\r\n    hashtable.addPatient(patient1)\r\n    hashtable.addPatient(patient2)\r\n    \r\n    all_patients = hashtable.getPatients()\r\n    assert len(all_patients) == 2\r\n    patient_ids = [patient.id for patient in all_patients]\r\n    assert \"4\" in patient_ids and \"5\" in patient_ids
===================================================================
diff --git a/src/tests/test_hashtable.py b/src/tests/test_hashtable.py
--- a/src/tests/test_hashtable.py	(revision 0e174426fcdda8cf9e03b80a4136f41548d322dd)
+++ b/src/tests/test_hashtable.py	(date 1752565023122)
@@ -2,9 +2,9 @@
 import os
 import pytest
 
-sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'ds')))
+sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
 
-from ..ds.hashtable_patients import HashTable, Patient
+from ds.hashtable_patients import HashTable, Patient
 
 @pytest.fixture
 def hashtable():
Index: src/tests/test_priorityQueue.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import unittest\r\n# Corrected import statement to get Patient and PriorityQueue from the ds.priorityQueue module\r\nfrom ..ds.priorityQueue import Patient, PriorityQueue\r\n\r\nclass TestPriorityQueue(unittest.TestCase):\r\n\r\n    def setUp(self):\r\n        \"\"\"Set up a new PriorityQueue before each test method.\"\"\"\r\n        self.pq = PriorityQueue()\r\n\r\n    def test_insert_and_size(self):\r\n        \"\"\"Test that insert adds patients and size updates correctly.\"\"\"\r\n        self.assertTrue(self.pq.is_empty())\r\n        self.assertEqual(self.pq.size(), 0)\r\n\r\n        self.pq.insert(\"Alice\", 3)\r\n        self.assertEqual(self.pq.size(), 1)\r\n        self.assertFalse(self.pq.is_empty())\r\n        # The heap property means the root is the smallest, so we check the actual object\r\n        # rather than assuming a specific name order if multiple items are present.\r\n        # For a single item, it will be at index 0.\r\n        self.assertEqual(self.pq.heap[0].name, \"Alice\")\r\n\r\n        self.pq.insert(\"Bob\", 1)\r\n        self.assertEqual(self.pq.size(), 2)\r\n        # With Bob (P1) inserted, Bob should be at the root (index 0)\r\n        self.assertEqual(self.pq.heap[0].name, \"Bob\")\r\n        # Alice should be the child\r\n        self.assertEqual(self.pq.heap[1].name, \"Alice\")\r\n\r\n\r\n    def test_remove_from_empty_queue(self):\r\n        \"\"\"Test removing from an empty queue returns None.\"\"\"\r\n        self.assertIsNone(self.pq.remove_highest_priority())\r\n        self.assertTrue(self.pq.is_empty())\r\n\r\n    def test_remove_single_patient(self):\r\n        \"\"\"Test removing the only patient in the queue.\"\"\"\r\n        self.pq.insert(\"Charlie\", 2)\r\n        patient = self.pq.remove_highest_priority()\r\n        self.assertIsNotNone(patient)\r\n        self.assertEqual(patient.name, \"Charlie\")\r\n        self.assertEqual(patient.priority, 2)\r\n        self.assertTrue(self.pq.is_empty())\r\n\r\n    def test_remove_multiple_patients_priority_order(self):\r\n        \"\"\"Test removal maintains priority order (lower number is higher priority).\"\"\"\r\n        self.pq.insert(\"Patient A\", 5)\r\n        self.pq.insert(\"Patient B\", 1)\r\n        self.pq.insert(\"Patient C\", 3)\r\n        self.pq.insert(\"Patient D\", 2)\r\n\r\n        # Expected order: B (1), D (2), C (3), A (5)\r\n        p1 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p1.name, \"Patient B\")\r\n        self.assertEqual(self.pq.size(), 3)\r\n\r\n        p2 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p2.name, \"Patient D\")\r\n        self.assertEqual(self.pq.size(), 2)\r\n\r\n        p3 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p3.name, \"Patient C\")\r\n        self.assertEqual(self.pq.size(), 1)\r\n\r\n        p4 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p4.name, \"Patient A\")\r\n        self.assertEqual(self.pq.size(), 0)\r\n        self.assertTrue(self.pq.is_empty())\r\n\r\n    def test_remove_multiple_patients_arrival_order_tie_breaking(self):\r\n        \"\"\"Test removal respects arrival order for tie-breaking priorities.\"\"\"\r\n        self.pq.insert(\"First A\", 3) # arrival_order 0\r\n        self.pq.insert(\"Second B\", 1) # arrival_order 1\r\n        self.pq.insert(\"Third C\", 3) # arrival_order 2\r\n        self.pq.insert(\"Fourth D\", 1) # arrival_order 3\r\n        self.pq.insert(\"Fifth E\", 2) # arrival_order 4\r\n\r\n        # Expected order based on priority then arrival:\r\n        # Second B (P1, A1)\r\n        # Fourth D (P1, A3)\r\n        # Fifth E (P2, A4)\r\n        # First A (P3, A0)\r\n        # Third C (P3, A2)\r\n\r\n        p1 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p1.name, \"Second B\")\r\n        self.assertEqual(p1.priority, 1)\r\n        self.assertEqual(p1.arrival_order, 1)\r\n\r\n        p2 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p2.name, \"Fourth D\")\r\n        self.assertEqual(p2.priority, 1)\r\n        self.assertEqual(p2.arrival_order, 3)\r\n\r\n        p3 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p3.name, \"Fifth E\")\r\n        self.assertEqual(p3.priority, 2)\r\n        self.assertEqual(p3.arrival_order, 4)\r\n\r\n        p4 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p4.name, \"First A\")\r\n        self.assertEqual(p4.priority, 3)\r\n        self.assertEqual(p4.arrival_order, 0)\r\n\r\n        p5 = self.pq.remove_highest_priority()\r\n        self.assertEqual(p5.name, \"Third C\")\r\n        self.assertEqual(p5.priority, 3)\r\n        self.assertEqual(p5.arrival_order, 2)\r\n\r\n        self.assertTrue(self.pq.is_empty())\r\n\r\n    def test_list_patients(self):\r\n        \"\"\"Test the list_patients method returns correct string representations.\"\"\"\r\n        self.assertEqual(self.pq.list_patients(), [])\r\n\r\n        self.pq.insert(\"Alice\", 3)\r\n        self.pq.insert(\"Bob\", 1)\r\n        self.pq.insert(\"Charlie\", 2)\r\n\r\n        # The order here is the internal heap order, not necessarily sorted by priority.\r\n        # We just check if the correct string representations are present.\r\n        self.assertIn(\"Bob (Priority 1)\", self.pq.list_patients())\r\n        self.assertIn(\"Alice (Priority 3)\", self.pq.list_patients())\r\n        self.assertIn(\"Charlie (Priority 2)\", self.pq.list_patients())\r\n        self.assertEqual(len(self.pq.list_patients()), 3)\r\n\r\n        # After removing, the list should reflect the new heap state\r\n        self.pq.remove_highest_priority() # Removes Bob\r\n        self.assertNotIn(\"Bob (Priority 1)\", self.pq.list_patients())\r\n        self.assertEqual(len(self.pq.list_patients()), 2)\r\n\r\n\r\n    def test_patient_comparison(self):\r\n        \"\"\"Test the __lt__ method of the Patient class directly.\"\"\"\r\n        p1 = Patient(\"P1\", 2, 0)\r\n        p2 = Patient(\"P2\", 1, 1)\r\n        p3 = Patient(\"P3\", 2, 2) # Same priority as P1, but later arrival\r\n        p4 = Patient(\"P4\", 3, 3)\r\n\r\n        self.assertTrue(p2 < p1) # P2 (P1) is higher priority than P1 (P2)\r\n        self.assertFalse(p1 < p2)\r\n\r\n        self.assertTrue(p1 < p3) # Same priority, P1 arrived earlier\r\n        self.assertFalse(p3 < p1)\r\n\r\n        self.assertTrue(p2 < p4) # P2 (P1) is higher priority than P4 (P3)\r\n\r\n        self.assertFalse(p1 < p1) # A patient is not less than itself\r\n\r\n# This allows you to run the tests directly from the command line\r\nif __name__ == '__main__':\r\n    unittest.main(argv=['first-arg-is-ignored'], exit=False)\r\n\r\n
===================================================================
diff --git a/src/tests/test_priorityQueue.py b/src/tests/test_priorityQueue.py
--- a/src/tests/test_priorityQueue.py	(revision 0e174426fcdda8cf9e03b80a4136f41548d322dd)
+++ b/src/tests/test_priorityQueue.py	(date 1752564995419)
@@ -1,6 +1,9 @@
-import unittest
+import unittest, sys, os
+
+sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
 # Corrected import statement to get Patient and PriorityQueue from the ds.priorityQueue module
-from ..ds.priorityQueue import Patient, PriorityQueue
+from ds.priorityQueue import Patient, PriorityQueue
+
 
 class TestPriorityQueue(unittest.TestCase):
 
